T(c) :- O(n)
S(c) :- O(n)
class Solution {
    public List<Integer> findMajority(int[] nums) {
        int n=nums.length;
        List<Integer> ls=new ArrayList<>();
        HashMap<Integer,Integer> map=new HashMap<>();
        for(int num:nums){
            map.put(num,map.getOrDefault(num,0)+1);
        }
        for(int key:map.keySet()){
            if(map.get(key)>n/3){
                ls.add(key);
            }
        }
        return ls;
    }
}


T(c) :- O(n)
S(c) :- O(1)
class Solution {
    public List<Integer> findMajority(List<Integer> nums) {
         int n = nums.size();
        int candidate1 = 0, candidate2 = 0, count1 = 0, count2 = 0;
        for (int num : nums) {
            if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            } else if (count1 == 0) {
                candidate1 = num;
                count1 = 1;
            } else if (count2 == 0) {
                candidate2 = num;
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }
        count1 = 0;
        count2 = 0;
        for (int num : nums) {
            if (num == candidate1) count1++;
            else if (num == candidate2) count2++;
        }
        List<Integer> result = new ArrayList<>();
        if (count1 > n / 3) result.add(candidate1);
        if (count2 > n / 3) result.add(candidate2);
        if (result.isEmpty()) result.add(-1);
        return result;
    }
}
