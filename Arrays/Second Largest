Using Arrays - T(c)-O(n) , S(c)-O(1)
class Solution {
    public int getSecondLargest(int[] arr) {
        // Code Here
        int min=-1,max=0;
        for(int i=0;i<arr.length;i++){
            if(arr[i]>max){
                max=arr[i];
            }
        }
        for(int i=0;i<arr.length;i++){
            if(arr[i]>min && max>arr[i]){
                min=arr[i];
            }
        }
        return min;
    }
}

Using TreeSet- T(c)-O(n), S(c)-O(n)

class Solution {
    public int getSecondLargest(int[] arr) {
        // Code Here
       TreeSet<Integer> set = new TreeSet<>();
        for (int num : arr) {
            set.add(num);
        }
        if (set.size() < 2) {
            return -1;
        }
        set.pollLast(); 
        return set.last();
    }
}
