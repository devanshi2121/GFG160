Brute force- T(c)-O(nlogn)
class Solution{
    public static void sort012(int a[], int n){ 
        Arrays.sort(a);
    }
}

Better approach- T(c)-O(2*n)
class Solution {
    // Function to sort an array of 0s, 1s, and 2s
    public void sort012(int[] arr) {
        // code here
        int zeros=0,ones=0,twos=0;
        for(int i=0;i<arr.length;i++){
            if(arr[i]==0){
                zeros++;
            }
            else if(arr[i]==1){
                ones++;
            }else{
                twos++;
            }
        }
        for(int i=0;i<zeros;i++){
            arr[i]=0;
        }
        for(int i=zeros;i<zeros+ones;i++){
            arr[i]=1;
        }
        for(int i=zeros+ones;i<zeros+ones+twos;i++){
            arr[i]=2;
        }
    }
}

Optimal Approach- T(c)-O(n)
class GfG {
    // Function to sort an array of 0s, 1s and 2s
    static void sort012(int[] arr) {
        int n = arr.length;
        int lo = 0;
        int hi = n - 1;
        int mid = 0, temp = 0;
        while (mid <= hi) {
            if (arr[mid] == 0) {
                swap(arr, mid, lo);
                lo++;
                mid++;
            }
            else if (arr[mid] == 1) {
                mid++;
            }
            else {
                swap(arr, mid, hi);
                hi--;
            }
        }
    }
    
    static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
